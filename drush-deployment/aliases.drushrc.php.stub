$site_group = $site_group ?: 'CHANGEME';

// Basic error handling
if ($site_group === 'CHANGEME') {
  drush_error('Luke, you should change the site group in aliases.drushrc.php.');
  exit;
}

$suffix = getenv('JENKINS_HOME') ? '_' . getenv('BUILD_NUMBER') : '';
$cid = "amazeeio_aliases_${identifier}${$suffix}";

// Try to pull the aliases from the cache.
$cache = drush_cache_get($cid);

// Drush does not respect the cache expire, so we need to check it ourselves.
if (isset($cache->data) && time() < $cache->expire && getenv('AMAZEEIO_IGNORE_DRUSHCACHE') === FALSE) {
  $aliases = $cache->data;
  return;
}

// The aliases haven't been cached yet. Load them from the API.
drush_log(sprintf('Loading site configuration for "%s" from the API.', $site_group));

$query = sprintf('{
  siteGroup(id: "%s") {
    sites {
      edges {
        node {
          siteName
          siteBranch
          siteEnvironment
          siteHost
          serverInfrastructure
          serverIdentifier
          serverNames
        }
      }
    }
  }
}', $site_group);

$api = 'http://amazeeio-api-develop.herokuapp.com/graphql';
$curl = curl_init($api);

// Build up the curl options for the GraphQL query. When using the content type
// 'application/json', graphql-express expects the query to be in the json
// encoded post body beneath the 'query' property.
curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
curl_setopt($curl, CURLOPT_POST, TRUE);
curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode(array(
  'query' => $query,
)));

$response = curl_exec($curl);

// Check if the curl request succeeded.
if ($response === FALSE) {
  $info = var_export(curl_getinfo($curl));
  curl_close($curl);

  drush_set_error(sprintf('Curl request failed. Additional information: %s.', $info));
  exit;
}

curl_close($curl);
$response = json_decode($response);

// Check if the query returned any data for the requested site group.
if (empty($response->data->siteGroup->sites->edges)) {
  drush_set_error(sprintf('Curl request didn\'t return any sites for the given site group "%s".', $site_group));
  exit;
}

$sites = array_map(function ($edge) {
  return $edge->node;
}, $response->data->siteGroup->sites->edges);

// Default server definition, which has no site specific elements
$defaults = [
  'command-specific' => [
    'sql-sync' => [
      'no-ordered-dump' => TRUE
    ],
  ],
];

$aliases = array_reduce($sites, function ($carry, $item) use ($defaults) {
  $server_infrastructure = $item->serverInfrastructure;
  $server_names = $item->serverNames;
  $site_name = $item->siteName;
  $site_branch = $item->siteBranch;
  $site_host = $item->siteHost;
  $web_root = $item->webRoot;

  $aliases = [];
  foreach ($server_names as $key => $server_name) {
    $conditional = [];
    if (in_array($server_infrastructure, ['single', 'cluster'])) {
      $conditional = [
        'ssh-options' => "-o ProxyCommand=\"ssh -W %h:%p frontend1.$site_host.amazee.io $LC_AMAZEEIO_SSH_OPTIONS -o USER=amazeelabs 2> /dev/null\"",
      ];
    }

    $aliases["${site_branch}${key}"] = $defaults + $conditional + [
      'remote-host' => "$server_name.amazee.io",
      'remote-user' => $site_name,
      'root' => "/var/www/$site_name/public_html/$web_root",
    ];
  }

  if (count($aliases) === 1) {
    return $carry + [$site_branch => reset($aliases)];
  }

  // Add another alias containing all of the aliases for this site's servers.
  $aliases[$site_branch] = [
    'site-list' => array_map(function ($alias) { return "@${alias}"; }, array_keys($aliases))
  ];

  return $carry + $aliases;
}, []);

// Caching the aliases for 10 minutes.
drush_cache_set($cid, $aliases, 'default', time() + 600);

