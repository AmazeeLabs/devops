// Basic error handling
if($sitename == 'CHANGEME')
  die("[ERROR] - Luke, you should change the Sitename in aliases.drushrc.php!\n");

// Drush Deploy Options
$options['application'] = 'drupal';
$options['branch'] = "prod";
$options['keep-releases'] = 3;
$options['deploy-via'] = 'RemoteCache';
$options['git_enable_submodules'] = TRUE;

$options['before']['deploy-symlink'][] = 'deploy_before_deploy_symlink_tasks';
$options['after']['deploy-symlink'][] = 'deploy_after_deploy_symlink_tasks';

// Default server definition, which has no site specific elements
$server_definition_defaults = array(
  'command-specific' => array (
    'sql-sync' => array (
      'no-cache' => TRUE,
      'no-ordered-dump' => TRUE
    ),
  ),
  'newrelic' => array (
    'api-key' => $options['newrelic-api-key'],
    'app-name' => '$siteurl'
  )
);

$cache = drush_cache_get('amazeeio_aliases_' . $sitename);
if (isset($cache->data)) {
  $aliases = $cache->data;
}
else {
  // Servers Definition File contains the definition for all servers that exist.
  // Try to fetch the custom overwrites for this site
  $servers_definition = json_decode(@file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/custom-site-configurations/'.$sitename.'.json?' . rand(0, 1000000)), TRUE);
  drush_log('Loading: https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/custom-site-configurations/'.$sitename.'.json?');

  // Adding the default server definitions into all servers.
  foreach ($servers_definition['servers'] as $server => $server_definition) {
    $aliases[$server] = $server_definition + $server_definition_defaults;
  }

  if (is_array($servers_definition['groups'])) {
    // Iterate through each group
    foreach ($servers_definition['groups'] as $group_name => $group_servers) {
      if (count($group_servers) == 1) {
        // Only one server in this group, instead of creating an alias site list, we just create another site-alias with this name.
        $aliases[$group_name] = $aliases[$group_servers[0]];
      } else {
        // For each actual server group, create an alias site list.
        $aliases[$group_name] = array(
          'site-list' => array_map(function($k){ return '@'.$k;}, $group_servers)
        );
      }
    }
  }

  // Replace Site specifc variables like userid and siteurl from the generated array
  $siteurl = str_replace('_', '.', $sitename);
  array_walk_recursive($aliases, 'deploy_replace_sitespecifics', array('$sitename' => $sitename, '$siteurl' => $siteurl));

  drush_cache_set('amazeeio_aliases_' . $sitename, $aliases);
}

// function_exists, because this file is included multiple times in the same drush process.
if (!function_exists('deploy_replace_sitespecifics')) {
  function deploy_replace_sitespecifics(&$item, $key, $sitespecifics) {
    $item = strtr($item, $sitespecifics);
  }
}



// Default Group of Tasks that should run before the new symlinks are created.
// This function should be used to overwrite in site specific aliases.drushrc.php files
if (!function_exists("deploy_before_deploy_symlink_tasks")) {
  function deploy_before_deploy_symlink_tasks($d) {
      deploy_settings_local_php_task($d);
      deploy_symlinks_task($d);
  }
}

// Default Group of Tasks that should run after the new symlinks are created.
// This function should be used to overwrite in site specific aliases.drushrc.php files

if (!function_exists("deploy_after_deploy_symlink_tasks")) {
  function deploy_after_deploy_symlink_tasks($d) {
      deploy_update_task($d);
      deploy_cache_task($d);
      deploy_newrelic_task($d);
  }
}



/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 * @mandatory
 */
if (!function_exists("deploy_settings_local_php_task")) {
  function deploy_settings_local_php_task($d) {
    $d->run("cp ~/settings.local.php %s/sites/default/settings.local.php 2>/dev/null || :", $d->latest_release());
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_symlinks_task")) {
  function deploy_symlinks_task($d) {
    if (strpos($d->sites[0]['remote-environment'], 'cluster.amazee.io') !== FALSE) {
      $d->run("ln -s ~/shared/files %s/sites/default/files", $d->latest_release());
    } 
    else {
      $d->run("ln -s ~/files %s/sites/default/files", $d->latest_release());
    }
  }
}


/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_update_task")) {
  function deploy_update_task($d) {
    $d->run_once("cd %s && %s updb -y", $d->latest_release(), $d->sites[0]['path-aliases']['%drush-script']);
  }
}


/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_cache_task")) {
  function deploy_cache_task($d) {
    $d->run_once("cd %s && %s cc all -y", $d->latest_release(), $d->sites[0]['path-aliases']['%drush-script']);
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_cache_css_js_task")) {
  function deploy_cache_css_js_task($d) {
    $d->run_once("cd %s && %s cc css-js -y", $d->latest_release(), $d->sites[0]['path-aliases']['%drush-script']);
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_cache_task_d8")) {
  function deploy_cache_task_d8($d) {
    $d->run_once("cd %s && %s cr -y", $d->latest_release(), $d->sites[0]['path-aliases']['%drush-script']);
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_newrelic_task")) {
  function deploy_newrelic_task($d) {
    // Try to get the user from the LC_AMA_GITUSER environment variable
    $username = getenv('LC_AMA_GITUSER');
    // if we fail to do so take the user which runs the php process
    if(!$username) { $username = get_current_user();}
    $d->run_once('curl -H "x-api-key:'.$d->sites[0]['newrelic']['api-key'].'" -d "deployment[app_name]=' . $d->sites[0]['newrelic']['app-name'] . '" -d "deployment[user]='.$username.'" https://api.newrelic.com/deployments.xml
  ', $d->sites[0]['path-aliases']['%drush-script']);
  }
}


/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_gulp_compile_task")) {
  function deploy_gulp_compile_task($d) {
    $d->run("cd %s && npm update && npm run bower -- install && npm run gulp -- compile", $d->latest_release());
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_gulp_build_task")) {
  function deploy_gulp_build_task($d) {
    $d->run("cd %s && npm install && npm run gulp -- build", $d->latest_release());
  }
}
