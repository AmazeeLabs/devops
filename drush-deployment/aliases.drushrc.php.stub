// Basic error handling
if($sitename == 'CHANGEME')
  die("[ERROR] - Luke, you should change the Sitename in aliases.drushrc.php!\n");

// Drush Deploy Options
$options['application'] = 'drupal';
$options['branch'] = "live";
$options['keep-releases'] = 3;
$options['deploy-via'] = 'RemoteCache';
$options['git_enable_submodules'] = TRUE;

// Drush Deploy Tasks (Taks are defined within deploy.drushrc.php)
$options['before']['deploy-symlink'][] = 'deploy_before_deploy_symlink_tasks';
$options['after']['deploy-symlink'][] = 'deploy_after_deploy_symlink_tasks';


// Globally defined so we can prevent drush from making too many requests to Github.
global $server_group_mappings;

// Fetch the Server Group Mapping File. First try to load a site specific file, if this does not exist, use the default ont.
if (!isset($server_group_mappings)) {
  $server_group_mappings = json_decode(file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/server-group-mappings/site-specific/' . $sitename . '.json?' . rand(0, 1000000)), TRUE);
  if (empty($server_group_mappings)) {
    $server_group_mappings = json_decode(file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/server-group-mappings/default.json?' . rand(0, 1000000)), TRUE);
  }
}

// Servers Definition File contains the definition for all servers that exist.
global $servers_definition;
if (!isset($servers_definition)) {
  $servers_definition = json_decode(@file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/servers_definition.json?' . rand(0, 1000000)), TRUE);
}

// Iterate through each group (will be Site Alias groups later)
foreach ($server_group_mappings as $group_name => $group_servers) {
  // Add each server of this group to the Alias file
  foreach ($group_servers as $server) {
    // The actual definition of the server is not in server_group_mappings, it lives in $servers_definition, just the keys of these two files match.
    $server_definition = $servers_definition[$server];

    // Default server definition, which has no site specific elements
    $defaults = array(
      'command-specific' => array (
        'sql-sync' => array (
          'no-cache' => TRUE,
          'no-ordered-dump' => TRUE
        ),
      ),
      'newrelic' => array (
        'api-key' => $options['newrelic-api-key'],
        'app-name' => '$siteurl'
      )
    );
    $aliases[$server] = $server_definition + $defaults;
  }

  // For each Server Group, create an alias site list.
  $aliases[$group_name] = array(
    'site-list' => array_map(function($k){ return '@'.$k;}, $group_servers)
  );
}

// Try to fetch the custom overwrites for this site
global $custom_site_configuration;
if (!isset($custom_site_configuration)) {
  $custom_site_configuration = json_decode(@file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/custom-site-configurations/'.$sitename.'.json?' . rand(0, 1000000)), TRUE);
}

// If we have custom site configuration, we overwrite every autogenerated configuration item
// with the site configuration or it adds it.
if (!empty($custom_site_configuration)) {
  foreach ($custom_site_configuration as $key => $value) {
    $aliases[$key] = $value;
  }
}

// function_exists, because this file is included multiple times in the same drush process.
if (!function_exists('deploy_replace_sitespecifics')) {
  function deploy_replace_sitespecifics(&$item, $key, $sitespecifics) {
    var_dump($item);
    $item = strtr($item, $sitespecifics);
  }
}

// Replace Site specifc variables like userid and siteurl from the generated array
$siteurl = str_replace('_', '.', $sitename);
array_walk_recursive($aliases, 'deploy_replace_sitespecifics', array('$sitename' => $sitename, '$siteurl' => $siteurl));


// Default Group of Tasks that should run before the new symlinks are created.
// This function should be used to overwrite in site specific aliases.drushrc.php files
if (!function_exists("deploy_before_deploy_symlink_tasks")) {
  function deploy_before_deploy_symlink_tasks($d) {
      deploy_settings_php_task($d);
      deploy_symlinks_task($d);
  }
}

// Default Group of Tasks that should run after the new symlinks are created.
// This function should be used to overwrite in site specific aliases.drushrc.php files

if (!function_exists("deploy_after_deploy_symlink_tasks")) {
  function deploy_after_deploy_symlink_tasks($d) {
      deploy_update_task($d);
      deploy_cache_task($d);
      deploy_newrelic_task($d);
  }
}


/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 * @mandatory
 */
if (!function_exists("deploy_settings_php_task")) {
  function deploy_settings_php_task($d) {
    $d->run("cp /home/nfs_share/www-data/`whoami`/settings.php %s/sites/default/settings.php", $d->latest_release());
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_symlinks_task")) {
  function deploy_symlinks_task($d) {
    $d->run("ln -s /home/nfs_share/www-data/`whoami`/files %s/sites/default/files", $d->latest_release());
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_update_task")) {
  function deploy_update_task($d) {
    $d->run_once("cd ~/public_html && %s updb -y", $d->sites[0]['path-aliases']['%drush-script']);
  }
}


/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_cache_task")) {
  function deploy_cache_task($d) {
    $d->run_once("cd ~/public_html && %s cc all -y", $d->sites[0]['path-aliases']['%drush-script']);
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_newrelic_task")) {
  function deploy_newrelic_task($d) {
    $d->run_once('curl -H "x-api-key:'.$d->sites[0]['newrelic']['api-key'].'" -d "deployment[app_name]=' . $d->sites[0]['newrelic']['app-name'] . '" -d "deployment[user]='.get_current_user().'" https://api.newrelic.com/deployments.xml
  ', $d->sites[0]['path-aliases']['%drush-script']);
  }
}
