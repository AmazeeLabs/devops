// Basic error handling
if($sitename == 'CHANGEME')
  die("[ERROR] - Luke, you should change the Sitename in aliases.drushrc.php!\n");

// Fetch our Distfile for magically know what servers we need to know within drush.
if (!isset$amazeelabs_configuration) {
  echo "download";
  $amazeelabs_configuration = json_decode(file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/servers.json'), TRUE);
}
// Fetch our Distfile for magically know what servers we need to know within drush.
$customer_server_configuration = json_decode(@file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/customers/'.$sitename.'_servers.json'), TRUE);
// Try to fetch the site related configs, if it fails we expect it not to be presetnt - quick and dirty
$customer_configuration = json_decode(@file_get_contents('https://raw.github.com/AmazeeLabs/devops/master/drush-deployment/customers/'.$sitename.'.json'), TRUE);

// Drush Deploy Options
$options['application'] = 'drupal';
$options['branch'] = "live";
$options['keep-releases'] = 3;
$options['deploy-via'] = 'RemoteCache';
$options['git_enable_submodules'] = TRUE;

// Drush Deploy Tasks (Taks are defined within deploy.drushrc.php)
$options['before']['deploy-symlink'][] = 'deploy_before_deploy_symlink_tasks';
$options['after']['deploy-symlink'][] = 'deploy_after_deploy_symlink_tasks';

if (!empty($customer_server_configuration)) {
  $amazeelabs_configuration = $customer_server_configuration;
}

// Generate Site specifc variables like userid and siteurl
$site = array();
$site['userid'] = $sitename;
$site['siteurl'] = str_replace('_', '.', $site['userid']);

// Generate live sites aliases
foreach ($amazeelabs_configuration['live'] as $key => $value) {
    $aliases[$key] = array(
    'remote-host' => $value,
    'remote-user' => $site['userid'],
    'path-aliases' => array(
      '%drush-script' => '/home/'. $site['userid'].'/bin/drush',
      '%dump-dir' => '/home/'. $site['userid'] .'/',
    ),
    'command-specific' => array (
    'sql-sync' => array (
      'no-cache' => TRUE,
      'no-ordered-dump' => TRUE
    ),
  ),
  'root' => '/home/'. $site['userid'].'/public_html',
  'uri' => 'http://'. $site['siteurl'].'.'. $value .'/',
  'newrelic' => array (
    'api-key' => $options['newrelic-api-key'],
    'app-name' => $site['siteurl']
  )
  );
}

// Generate DEV sites aliases
foreach ($amazeelabs_configuration['dev'] as $key => $value) {
    $aliases[$key] = array(
    'remote-host' => $value,
    'remote-user' => 'www-data',
    'path-aliases' => array(
      '%drush-script' => '/home/www-data/bin/drush',
      '%dump-dir' => '/home/www-data/',
    ),
    'command-specific' => array (
    'sql-sync' => array (
      'no-cache' => TRUE,
      'no-ordered-dump' => TRUE
    ),
  ),
  'root' => '/home/www-data/'. $site['siteurl'],
  'uri' => 'http://'. $site['siteurl'].'.'. $value .'/',
      );
}

// if we have customer configuration, we overwrite every autogenerated configuration item
// with the customer configuration
if ($customer_configuration == true) {
  foreach ($customer_configuration as $key => $value) {
    $aliases[$key] = $value;
  }
}

// Generate Server Groups
$aliases['live'] = array(
  'site-list' => array_map(function($k){ return '@'.$k;},array_keys($amazeelabs_configuration['live']))
);

if (!function_exists("deploy_before_deploy_symlink_tasks")) {
  function deploy_before_deploy_symlink_tasks($d) {
      deploy_settings_php_task($d);
      deploy_symlinks_task($d);
  }
}

if (!function_exists("deploy_after_deploy_symlink_tasks")) {
  function deploy_after_deploy_symlink_tasks($d) {
      deploy_update_task($d);
      deploy_cache_task($d);
      deploy_newrelic_task($d);
  }
}


/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 * @mandatory
 */
if (!function_exists("deploy_settings_php_task")) {
  function deploy_settings_php_task($d) {
    $d->run("cp /home/nfs_share/www-data/`whoami`/settings.php %s/sites/default/settings.php", $d->latest_release());
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_symlinks_task")) {
  function deploy_symlinks_task($d) {
    $d->run("ln -s /home/nfs_share/www-data/`whoami`/files %s/sites/default/files", $d->latest_release());
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_update_task")) {
  function deploy_update_task($d) {
    $d->run_once("cd ~/public_html && %s updb -y", $d->sites[0]['path-aliases']['%drush-script']);
  }
}


/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_cache_task")) {
  function deploy_cache_task($d) {
    $d->run_once("cd ~/public_html && %s cc all -y", $d->sites[0]['path-aliases']['%drush-script']);
  }
}

/**
 * The task needs to be defined with a @task "decorator" in the comment block preceding it
 * @task
 */
if (!function_exists("deploy_newrelic_task")) {
  function deploy_newrelic_task($d) {
    $d->run_once('curl -H "x-api-key:'.$d->sites[0]['newrelic']['api-key'].'" -d "deployment[app_name]=' . $d->sites[0]['newrelic']['app-name'] . '" -d "deployment[user]='.get_current_user().'" https://api.newrelic.com/deployments.xml
  ', $d->sites[0]['path-aliases']['%drush-script']);
  }
}
